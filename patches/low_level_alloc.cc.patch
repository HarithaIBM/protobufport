diff --git a/third_party/abseil-cpp/absl/base/internal/low_level_alloc.cc b/third_party/abseil-cpp/absl/base/internal/low_level_alloc.cc
index 662167b0..ff4f10c7 100644
--- a/third_party/abseil-cpp/absl/base/internal/low_level_alloc.cc
+++ b/third_party/abseil-cpp/absl/base/internal/low_level_alloc.cc
@@ -407,6 +407,8 @@ bool LowLevelAlloc::DeleteArena(Arena *arena) {
     munmap_result = VirtualFree(region, 0, MEM_RELEASE);
     ABSL_RAW_CHECK(munmap_result != 0,
                    "LowLevelAlloc::DeleteArena: VitualFree failed");
+#elif defined(__MVS__)
+    free((void*)region);
 #else
 #ifndef ABSL_LOW_LEVEL_ALLOC_ASYNC_SIGNAL_SAFE_MISSING
     if ((arena->flags & LowLevelAlloc::kAsyncSignalSafe) == 0) {
@@ -553,6 +555,8 @@ static void *DoAllocWithArena(size_t request, LowLevelAlloc::Arena *arena) {
       new_pages = VirtualAlloc(0, new_pages_size,
                                MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
       ABSL_RAW_CHECK(new_pages != nullptr, "VirtualAlloc failed");
+#elif __MVS__
+    new_pages = malloc(new_pages_size);
 #else
 #ifndef ABSL_LOW_LEVEL_ALLOC_ASYNC_SIGNAL_SAFE_MISSING
       if ((arena->flags & LowLevelAlloc::kAsyncSignalSafe) != 0) {
@@ -563,10 +567,10 @@ static void *DoAllocWithArena(size_t request, LowLevelAlloc::Arena *arena) {
                          MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
       }
 #else
-      new_pages = mmap(nullptr, new_pages_size, PROT_WRITE | PROT_READ,
-                       MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
+      new_pages = malloc(new_pages_size); //mmap(nullptr, new_pages_size, PROT_WRITE | PROT_READ,
+                       //MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
 #endif  // ABSL_LOW_LEVEL_ALLOC_ASYNC_SIGNAL_SAFE_MISSING
-      if (new_pages == MAP_FAILED) {
+      if (new_pages == 0) {
         ABSL_RAW_LOG(FATAL, "mmap error: %d", errno);
       }
 
